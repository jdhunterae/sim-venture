from utils import *from actions import *class Character(object):    def __init__(self, name="[error]", health=1, attack_p=1, defense_p=1, mana=0, attack_m=0, defense_m=0, speed=1, experience=1, inventory={}):        self.name = name        self.health = health        self.health_max = health        self.attack_p = attack_p        self.defense_p = defense_p        self.mana = mana        self.mana_max = mana        self.attack_m = attack_m        self.defense_m = defense_m        self.speed = speed        self.experience = experience        self.level = 1        self.experience_to_next_level = 10        self.inventory = inventory        self.actions = []        self.attack_action = AttackAction(self)        self.escape_action = EscapeAction(self)        self.actions.append(self.attack_action)        self.actions.append(self.escape_action)        self.state = "normal"    def update_state(self):        if self.state is "normal":            if self.health < 0.3 * self.health_max:                self.state = "bloody"        elif self.state is "bloody":            if self.health > 0.3 * self.health_max:                self.state = "normal"    def is_dead(self):        return self.health <= 0    def is_alive(self):        return self.health > 0    def engage(self, battle_queue):        round_action = self.choose_action(battle_queue)        round_action.perform(battle_queue)    def choose_action(self, battle_queue):        return self.attack_action    def get_sheet(self):        sheet = "== %-20s === LV %2d | [%8s]\n" % (            self.name, self.level, type(self).__name__.upper())        sheet += "   heal  (  %3d / %3d )  mana  (  %3d / %3d )\n" % (            self.health, self.health_max, self.mana, self.mana_max)        sheet += "   phys  < %2d >  [ %2d ]               exp: %3d\n" % (            self.attack_p, self.defense_p, self.experience)        sheet += "   magi  < %2d >  [ %2d ]\n" % (            self.attack_m, self.defense_m)        return sheetclass Player(Character):    def __init__(self, name="[error]", health=1, attack_p=1, defense_p=1, mana=0, attack_m=0, defense_m=0, speed=1, experience=1, inventory={}):        super(Player, self).__init__(name, health, attack_p, defense_p,                                     mana, attack_m, defense_m, speed, experience, inventory)        self.experience_to_next_level = 10    def get_sheet(self):        sheet = "== %-20s === LV %2d | [%8s]\n" % (            self.name, self.level, type(self).__name__.upper())        sheet += "   heal  (  %3d / %3d )  mana  (  %3d / %3d )\n" % (            self.health, self.health_max, self.mana, self.mana_max)        sheet += "   phys  < %2d >  [ %2d ]               exp: %3d\n" % (            self.attack_p, self.defense_p, self.experience)        sheet += "   magi  < %2d >  [ %2d ]            to nxt: %3d\n" % (            self.attack_m, self.defense_m, self.experience_to_next_level)        return sheetclass Fighter(Player):    def __init__(self):        super(Fighter, self).__init__("Steve", 10, 5, 5, 2)class Cleric(Player):    def __init__(self):        super(Cleric, self).__init__("Carl", 8, 4, 4, 4, 1, 1)class Mage(Player):    def __init__(self):        super(Mage, self).__init__("Gary", 6, 2, 2, 6, 3, 3)        self.magic_action = MagicMissleAction(self)        self.actions.append(self.magic_action)    def choose_action(self, battle_queue):        if self.mana >= 1:            return self.magic_action        else:            return self.attack_actionclass Thief(Player):    def __init__(self):        super(Thief, self).__init__("Jimmy", 8, 3, 3, 4, 2, 2, 2)class Monster(Character):    def __init__(self, name="[error]", health=1, attack_p=1, defense_p=1, mana=0, attack_m=0, defense_m=0, speed=1, experience=1, inventory={}):        super(Monster, self).__init__(name, health, attack_p, defense_p,                                      mana, attack_m, defense_m, speed, experience, inventory)        self.experience_to_next_level = -1    def choose_action(self, battle_queue):        self.update_state()        if self.state is "bloody":            return self.escape_action        return self.attack_actionclass Goblin(Monster):    def __init__(self):        super(Goblin, self).__init__("a goblin", 8, 3, 4, speed=2)class Orc(Monster):    def __init__(self):        super(Orc, self).__init__("an orc", 10, 4, 3)